{"version":3,"sources":["logo.svg","components/Header.js","components/Timer.js","components/Footer.js","components/FriendCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","React","Component","Timer","props","state","seconds","this","setState","interval","setInterval","tick","clearInterval","Footer","href","target","rel","FriendCard","id","key","onClick","handleClick","clicked","alt","src","image","App","friends","score","topScore","message","handleKlick","klicked","friendsOrder","forEach","friend","index","sort","Math","random","newScore","newTopScore","Container","fluid","logo","Row","Col","map","sm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d8097be6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass Header extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Header\">\n                <br />\n                The Klicky Game\n                <br />\n                <br />\n            </div>\n        );\n    };\n};\nexport default Header;","import React from 'react';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { seconds: 0 };\n    }\n\n    tick() {\n        this.setState(state => ({\n            seconds: state.seconds + 1\n        }));\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.tick(), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <p>\n                Time spent klicking: {this.state.seconds}\n            </p>\n        );\n    }\n}\n\nexport default Timer;","import React from 'react';\n\nclass Footer extends React.Component {\n\n    render() {\n        return (\n            <div className=\"Footer\">\n                <br></br>\n                <br></br>\n                Miguel Delos Santos\n                <br></br>\n                <a\n                    className=\"App-link\"\n                    href=\"https://github.com/doz-a/clicky-game2020\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Github Repo\n      </a>\n                <br></br>\n                <br></br>\n                <br></br>\n            </div>\n        );\n    };\n};\nexport default Footer;","import React from \"react\";\nimport { Container, Row, Col } from 'react-bootstrap';\n// Add style later \n// import \"./style.css\";\n\nfunction FriendCard(props) {\n    return (\n        <div\n            className=\"card\" id=\"card\"\n            key={props.id}\n            onClick={() => props.handleClick(props.id, props.clicked)}\n        >\n            <div className=\"img-container\">\n                <img alt={props.id} src={props.image} />\n            </div>\n        </div>\n    );\n}\n\nexport default FriendCard;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Timer from './components/Timer';\nimport Footer from './components/Footer';\nimport friends from './friends.json';\nimport FriendCard from './components/FriendCard';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nclass App extends Component {\n  state = {\n\n    // JSON\n    friends,\n    score: 0,\n    topScore: 0,\n    message: \"Klick on each image only once, and try to get the top score! Klick a food to start the game :)\"\n  };\n\n  handleKlick = (id, klicked) => {\n    const friendsOrder = this.state.friends;\n    // console.log(\"klick works\" + JSON.stringify(friendsOrder))\n\n    // Win statement (if you can get there)\n    if (this.state.score === 12) {\n      return this.setState({\n        message: \"You win! You have the memory of an elephant!\"\n      })\n    }\n\n    else if (klicked) {\n      friendsOrder.forEach((friend, index) => {\n        friendsOrder[index].klicked = false;\n      });\n      // Randomizer \n      return this.setState({\n        friend: friendsOrder.sort(() => Math.random() - 0.5),\n        message: \"Wrong Guess! Try playing again :)\",\n        score: 0\n      })\n    }\n\n    else {\n      friendsOrder.forEach((friend, index) => {\n        if (id === friend.id) {\n          friendsOrder[index].klicked = true;\n        }\n      });\n\n      const { topScore, score } = this.state;\n      const newScore = score + 1;\n      const newTopScore = newScore > topScore ? newScore : topScore;\n\n      return this.setState({\n        friend: friendsOrder.sort(() => Math.random() - .5),\n        message: \"Good Guess!\",\n        score: newScore,\n        topScore: newTopScore,\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid id=\"container\">\n        <Header />\n        <br></br>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <br />\n        <br />\n\n        <Timer />\n\n        <Row>\n          <Col>\n            {/* Game message  */}\n            <p>{this.state.message}</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <p>Your Current Score: {this.state.score} || Your Best Score: {this.state.topScore}</p>\n          </Col>\n        </Row>\n        <Row>\n          {this.state.friends.map(friend => (\n            <Col sm=\"2\" id=\"col\">\n              <FriendCard\n                id={friend.id}\n                key={friend.id}\n                image={friend.image}\n                klicked={friend.klicked}\n                handleKlick={this.handleKlick}\n              />\n            </Col>\n          ))\n          }\n        </Row>\n        <br />\n\n        <Footer />\n      </Container>\n    )\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/boostrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}